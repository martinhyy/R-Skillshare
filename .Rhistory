))
)
body
names(body)
str(body)
body$children
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
?theme
?theme
?fluidPage
?fluidRow
?dashboardHeader
?dashboardPage
?dashboardHeader
interactive()
runApp('F:/Work/Harmonic/TP/Shiny/trial2')
# A dashboard header with 3 dropdown menus
header <- dashboardHeader(
title = "Dashboard Demo",
# Dropdown menu for messages
dropdownMenu(type = "messages", badgeStatus = "success",
messageItem("Support Team",
"This is the content of a message.",
time = "5 mins"
),
messageItem("Support Team",
"This is the content of another message.",
time = "2 hours"
),
messageItem("New User",
"Can I get some help?",
time = "Today"
)
),
# Dropdown menu for notifications
dropdownMenu(type = "notifications", badgeStatus = "warning",
notificationItem(icon = icon("users"), status = "info",
"5 new members joined today"
),
notificationItem(icon = icon("warning"), status = "danger",
"Resource usage near limit."
),
notificationItem(icon = icon("shopping-cart", lib = "glyphicon"),
status = "success", "25 sales made"
),
notificationItem(icon = icon("user", lib = "glyphicon"),
status = "danger", "You changed your username"
)
),
# Dropdown menu for tasks, with progress bar
dropdownMenu(type = "tasks", badgeStatus = "danger",
taskItem(value = 20, color = "aqua",
"Refactor code"
),
taskItem(value = 40, color = "green",
"Design new layout"
),
taskItem(value = 60, color = "yellow",
"Another task"
),
taskItem(value = 80, color = "red",
"Write documentation"
)
)
)
shinyApp(
ui = dashboardPage(
header,
dashboardSidebar(),
dashboardBody()
),
server = function(input, output) { }
)
source('~/.active-rstudio-document', echo=TRUE)
?icon
source('~/.active-rstudio-document', echo=TRUE)
icon("users")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?dropdownMenu
dropdownMenu(type = "notifications", badgeStatus = "warning",
notificationItem(icon = icon("facebook"), status = "info",
"5 new members joined today"
),
notificationItem(icon = icon("warning"), status = "danger",
"Resource usage near limit."
),
notificationItem(icon = icon("facebook", lib = "glyphicon"),
status = "success", "25 sales made"
),
notificationItem(icon = icon("user", lib = "glyphicon"),
status = "danger", "You changed your username"
)
)
?dropdownMenuOutput
?dropdownMenu
source('~/.active-rstudio-document', echo=TRUE)
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
?notificationItem
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
?notificationItem
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
?notificationItem
?dropdownMenu
source('~/.active-rstudio-document', echo=TRUE)
header <- dashboardHeader(
title = 'Shiny Memery',
# Dropdown menu for notifications
dropdownMenu(type = "notifications", badgeStatus = NULL,
notificationItem(icon = icon("facebook"), status = "info",
text = "My Facebook page",
href = "https://www.facebook.com/martin.hou.56?ref=bookmarks"
)
)
)
header
notificationItem
dropdownMenu
tags
shiny::runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
notificationItem
dropdownMenu
header <- dashboardHeader(
title = 'Shiny Memery',
# Dropdown menu for notifications
dropdownMenu(type = "notifications", badgeStatus = NULL,
notificationItem(icon = icon("facebook"), status = "info",
text = "My Facebook page",
href = "https://www.facebook.com/martin.hou.56?ref=bookmarks"
)
)
)
headder
header
names(header)
header$children
header$children[[3]]
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
?tabPanel
?absolutePanel
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
?tabBox
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
?png
shiny::runApp('F:/Work/Greenpeace/SaveReport')
shiny::runApp('F:/Work/Greenpeace/SaveReport')
runApp('F:/Work/Greenpeace/SaveReport')
runApp('F:/Work/Greenpeace/SaveReport')
runApp('F:/Work/Greenpeace/SaveReport')
runApp('F:/Work/Greenpeace/SaveReport')
runApp('F:/Work/Greenpeace/SaveReport')
runApp('F:/Work/Greenpeace/SaveReport')
shiny::runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
?sliderInput
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
library(ggplot2)
df <- read.csv("F:\\Work\\Greenpeace\\test.csv",
header = T,
stringsAsFactors = F)
str(df)
View(df)
df <- read.csv("F:\\Work\\Greenpeace\\test.csv",
header = T,
stringsAsFactors = F)
df <- read.csv("F:\\Work\\Greenpeace\\test.csv",
header = T,
stringsAsFactors = F)
View(df)
df <- read.csv("F:\\Work\\Greenpeace\\test.csv",
header = T,
stringsAsFactors = F)
str(df)
ggplot(data = df, aes(x=Date, y=Value2)) +
geom_line()
?aes
ggplot(data = df, aes(x=Date, y=Value2, color=Group)) +
geom_line()
ggplot(data = df, aes(x=Date)) +
geom_line(aes(y = Value1))
ggplot(data = df, aes(x=Date, y=Value2, color=Group)) +
aes(group = Group)
ggplot(data = df, aes(x=Date, y=Value2, color=Group)) +
geom_line(aes(group = Group))+
geom_point()
ggplot(test_data, aes(Date)) +
geom_line(aes(y = Value1, colour = Group)) +
geom_line(aes(y = Value2, colour = Group))
ggplot(df, aes(Date)) +
geom_line(aes(y = Value1, colour = Group)) +
geom_line(aes(y = Value2, colour = Group))
ggplot(data = df, aes(x=Date, y=c(Value2,Value1), color=Group)) +
geom_line(aes(group = Group))+
geom_point()
ggplot(df, aes(Date)) +
geom_line(aes(y = Value1, colour = "value1")) +
geom_line(aes(y = Value2, colour = "value2"))
ggplot(df, aes(Date, group = Group)) +
geom_line(aes(y = Value1, colour = "value1")) +
geom_line(aes(y = Value2, colour = "value2"))
ggplot(df, aes(Date, group = Group)) +
geom_line(aes(y = Value1, colour = "value1", group = Group)) +
geom_line(aes(y = Value2, colour = "value2", group = Group))
ggplot(data = df, aes(x=Date, y=c(Value2,Value1), color=Group)) +
geom_line(aes(group = Group))+
geom_point()
ggplot(data = df, aes(x=Date, y=Value2, color=Group)) +
geom_line(aes(group = Group))+
geom_point()
ggplot(data = df, aes(x=Date, y=Value2, color=Group)) +
geom_line(aes(group = Group))+
geom_point() +
geom_line(aes(y=Value1, color = Group))
ggplot(data = df, aes(x=Date, y=Value2, color=Group)) +
geom_line(aes(group = Group))+
geom_point() +
geom_line(aes(y=Value1, group = Group))
ggplot(data = df, aes(x=Date, y=Value2, color=Group)) +
geom_line(aes(group = Group))+
geom_point() +
geom_line(aes(y=Value1, group = Group)) +
geom_point()
ggplot(data = df, aes(x=Date, y=Value2, color=Group)) +
geom_line(aes(group = Group))+
geom_line(aes(y=Value1, group = Group)) +
geom_point()
ggplot(data = df, aes(x=Date, y=Value2, color=Group)) +
geom_line(aes(group = Group))+
geom_line(aes(y=Value1, group = Group))
?geom_point
ggplot(data = df, aes(x=Date, y=Value2, color=Group)) +
geom_line(aes(group = Group))+
geom_line(aes(y=Value1, group = Group))
?geom_line
ggplot(data = df, aes(x=Date, y=Value2, color=Group)) +
geom_line(aes(group = Group))+
geom_point(aes(y = Value2)) +
geom_line(aes(y=Value1, group = Group)) +
geom_point(aes(y = Value1))
?geom_point
ggplot(data = df, aes(x=Date, y=Value2, color=Group)) +
geom_line(aes(group = Group))+
geom_point(aes(y = Value2)) +
geom_line(aes(y=Value1, group = Group)) +
geom_point(aes(y = Value1), shape = 3)
?geom_point
ggplot(data = df, aes(x=Date, y=Value2, color=Group)) +
geom_line(aes(group = Group))+
geom_point(aes(y = Value2), show.legend = "hehe") +
geom_line(aes(y=Value1, group = Group)) +
geom_point(aes(y = Value1), shape = 3)
source("http://www.ling.upenn.edu/~joseff/rstudy/plots/graphics/phila_bar.R")
View(phil)
?melt
library(reshape2)
?melt
melt(df)
df.m <- melt(df)
ggplot(df.m, aes(x = Date, y = value, group = Group:variable)) +
geom_line()
ggplot(df.m, aes(x = Date, y = value,
group = Group:variable,
color = Group)) +
geom_line()
ggplot(phil, aes(Level, value,
color = Name,
linetype = Gender,
group = Gender:Name))+
geom_point()+
geom_line()
ggplot(phil, aes(Level, value,
group = Gender:Name))+
geom_point()+
geom_line()
ggplot(df.m, aes(x = Date, y = value,
group = variable,
color = Group)) +
geom_line()
ggplot(df.m, aes(x = Date, y = value,
group = Group,
color = variable)) +
geom_line()
ggplot(df.m, aes(x = Date, y = value,
group = Group:variable,
linetype = Group
color = variable)) +
geom_line()
ggplot(df.m, aes(x = Date, y = value,
group = Group:variable,
linetype = Group,
color = variable)) +
geom_line()
ggplot(df.m, aes(x = Date, y = value,
group = c(Group,variable),
linetype = Group,
color = variable)) +
geom_line()
df.m
str(df.m)
str(df)
df <- read.csv("F:\\Work\\Greenpeace\\test.csv",
header = T,
stringsAsFactors = F)
str(df)
ggplot(df.m, aes(x = Date, y = value,
group = c(Group,variable),
linetype = Group,
color = variable)) +
geom_line()+
geom_point()
ggplot(df.m, aes(x = Date, y = value,
group = Group:variable,
linetype = Group,
color = variable)) +
geom_line()+
geom_point()
str(phil)
df.m$Group <- as.factor(df.m$Group)
ggplot(df.m, aes(x = Date, y = value,
group = Group:variable,
linetype = Group,
color = variable)) +
geom_line()+
geom_point()
library(slidify)
slidify("F:\\Software backup\\R Programming Examples.Rmd")
publish(title = 'mytitle', 'index.html', host = 'rpubs')
publish(title = 'mytitle', 'F:\\Software backup\\R_Programming_Examples.html', host = 'rpubs')
slidify("F:\\Software backup\\R Programming Examples.Rmd")
shiny::runApp('F:/Work/Greenpeace/GeographicDataVisualization/test')
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
pointsSP <- SpatialPoints(dfs()[,c("lon", "lat")],  proj4string=CRS(proj4string(countriesSP)))
indices <- over(pointsSP, countriesSP)
pointsSP <- SpatialPoints(df[,c("lon", "lat")],  proj4string=CRS(proj4string(countriesSP)))
pointsSP
indices <- over(pointsSP, countriesSP)
View(indices)
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
View(df)
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
pointsSP <- SpatialPoints(dfs()[,c("lon", "lat")],  proj4string=CRS(proj4string(countriesSP)))
indices <- over(pointsSP, countriesSP)
indices
pointsSP <- SpatialPoints(df[,c("lon", "lat")],  proj4string=CRS(proj4string(countriesSP)))
indices <- over(pointsSP, countriesSP)
indices
View(indices)
c(names(dfs()), "Country")
c(names(df), "Country")
View(df)
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
runApp('F:/Work/Greenpeace/GeographicDataVisualization/ShinyApp')
load("F:/Software backup/gift.RData")
library(slidify)
slidify("F:\\Work\\Greenpeace\\R Skillshare\\R Programming Examples V2.Rmd")
gift.dt <- data.table(gift)
gift.ag <- gift.dt[,list(Count = length(Amount),
Average = mean(Amount),
Total = sum(Amount)),
by = list(Year, month, GROUP)]
gift.ag$date <- as.Date(paste(gift.ag$Year,gift.ag$month, 1, sep = "-"))
gift.ag <- gift.ag[order(gift.ag$GROUP, descending = FALSE),]
ggplot(data = gift.ag , aes(x=date, y=Count, fill = GROUP)) +
geom_bar(stat = "identity") +
ggtitle("Number of Recurring Gift by FR Programme")
slidify("F:\\Work\\Greenpeace\\R Skillshare\\R Programming Examples V2.Rmd")
gift$DTE <- as.Date(gift$DTE)
gift$Year <- year(gift$DTE)
gift$month <- month(gift$DTE)
gift.ag1 <- as.data.frame(as.list(aggregate(Amount ~ Year + month + GROUP,
data = gift,
FUN = function(x) c(Count = length(x), Average = mean(x), Total = sum(x)))
)
)
gift.ag <- gift.dt[,list(Count = length(Amount),
Average = mean(Amount),
Total = sum(Amount)),
by = list(Year, month, GROUP)]
slidify("F:\\Work\\Greenpeace\\R Skillshare\\R Programming Examples V2.Rmd")
install.packages("RODBC")
slidify("F:\\Work\\Greenpeace\\R Skillshare\\R Programming Examples V2.Rmd")
slidify("F:\\Work\\Greenpeace\\R Skillshare\\R Programming Examples V2.Rmd")
load("F:\\Software backup\\gift.RData")
gift.dt <- data.table(gift)
gift.ag <- gift.dt[,list(Count = length(Amount),
Average = mean(Amount),
Total = sum(Amount)),
by = list(Year, month, GROUP)]
library(data.table)
load("F:\\Software backup\\gift.RData")
start.time <- Sys.time()
gift.dt <- data.table(gift)
gift.ag <- gift.dt[,list(Count = length(Amount),
Average = mean(Amount),
Total = sum(Amount)),
by = list(Year, month, GROUP)]
Sys.time() - start.time
```
gift.ag <- gift.ag[order(gift.ag$GROUP, descending = FALSE),]
ggplot(data = gift.ag , aes(x=date, y=Count, fill = GROUP)) +
geom_bar(stat = "identity") +
ggtitle("Number of Recurring Gift by FR Programme")
library(ggplot2)
gift.ag <- gift.ag[order(gift.ag$GROUP, descending = FALSE),]
ggplot(data = gift.ag , aes(x=date, y=Count, fill = GROUP)) +
geom_bar(stat = "identity") +
ggtitle("Number of Recurring Gift by FR Programme")
gift$DTE <- as.Date(gift$DTE)
gift$Year <- year(gift$DTE)
gift$month <- month(gift$DTE)
library(ggplot2)
gift.ag <- gift.ag[order(gift.ag$GROUP, descending = FALSE),]
ggplot(data = gift.ag , aes(x=date, y=Count, fill = GROUP)) +
geom_bar(stat = "identity") +
ggtitle("Number of Recurring Gift by FR Programme")
gmotion <- gvisMotionChart(gift.ag,
idvar = "GROUP",
timevar = "date",
xvar = "Count",
yvar = "Average",
options = list(width=400, height=200))
gmotion
library(googleVis)
gmotion <- gvisMotionChart(gift.ag,
idvar = "GROUP",
timevar = "date",
xvar = "Count",
yvar = "Average",
options = list(width=400, height=200))
gmotion
slidify("F:\\Work\\Greenpeace\\R Skillshare\\R Programming Examples V2.Rmd")
library(slidify)
slidify("F:\\Work\\Greenpeace\\R Skillshare\\R Programming Examples V2.Rmd")
gmotion <- gvisMotionChart(gift.ag,
idvar = "GROUP",
timevar = "date",
xvar = "Count",
yvar = "Average",
options = list(width=400, height=200))
plot(gmotion)
gmotion
print(gmotion, tag = 'html')
slidify("F:\\Work\\Greenpeace\\R Skillshare\\R Programming Examples V2.Rmd")
install.packages("googleVis")
install.packages("googleVis")
slidify("F:\\Work\\Greenpeace\\R Skillshare\\R Programming Examples V2.Rmd")
library(slidify)
slidify("F:\\Work\\Greenpeace\\R Skillshare\\R Programming Examples V2.Rmd")
?print.gvis
slidify("F:\\Work\\Greenpeace\\R Skillshare\\R Programming Examples V2.Rmd")
slidify("F:\\Work\\Greenpeace\\R Skillshare\\R Programming Examples V2.Rmd")
plot(gmotion, tag = 'divChart')
plot(gmotion, tag = 'chart')
slidify("F:\\Work\\Greenpeace\\R Skillshare\\R Programming Examples V2.Rmd")
slidify("F:\\Work\\Greenpeace\\R Skillshare\\R Programming Examples V2.Rmd")
plot(gmotion)
library(slidify)
slidify("F:\\Work\\Greenpeace\\R Skillshare\\index.Rmd")
install.packages("rgdal")
slidify("F:\\Work\\Greenpeace\\R Skillshare\\index.Rmd")
slidify("F:\\Work\\Greenpeace\\R Skillshare\\index.Rmd")
slidify("F:\\Work\\Greenpeace\\R Skillshare\\index.Rmd")
london.shp <- readOGR(dsn = "F:\\Work\\Greenpeace\\R Skillshare\\Data\\ESRI",
layer = "London_Borough_Excluding_MHW")
slidify("F:\\Work\\Greenpeace\\R Skillshare\\index.Rmd")
slidify("F:\\Work\\Greenpeace\\R Skillshare\\index.Rmd")
slidify("F:\\Work\\Greenpeace\\R Skillshare\\index.Rmd")
publish_github(repo = 'R-Skillshare', username = 'martinhyy')
setwd("F:/Work/Greenpeace/R Skillshare")
publish_github(repo = 'R-Skillshare', username = 'martinhyy')
slidify("F:\\Work\\Greenpeace\\R Skillshare\\index.Rmd")
slidify("F:\\Work\\Greenpeace\\R Skillshare\\index.Rmd")
slidify("F:\\Work\\Greenpeace\\R Skillshare\\index.Rmd")
slidify("F:\\Work\\Greenpeace\\R Skillshare\\index.Rmd")
slidify("F:\\Work\\Greenpeace\\R Skillshare\\index.Rmd")
slidify("F:\\Work\\Greenpeace\\R Skillshare\\index.Rmd")
library(slidify)
slidify("F:\\Work\\Greenpeace\\R Skillshare\\index.Rmd")
library(jsonlite)
url <- "http://www.fao.org/figis/vrmf/finder/services/public/vessels/search?c=true&gd=true&nof=false&not=false&nol=false&ps=30&o=0&user=NOT_SET"
fishery <- fromJSON(txt=url)
data <- fishery$data$dataSet
data.tidy <- subset(data,select = c(name, gearType, gearTypeID))
head(data.tidy)
fishery <- fromJSON(txt=url)
url <- "http://www.fao.org/figis/vrmf/finder/services/public/vessels/search?c=true&gd=true&nof=false&not=false&nol=false&ps=30&o=0&user=NOT_SET"
fishery <- fromJSON(txt=url)
options(width = 100)
load("F:\\Software backup\\gift.RData")
head(gift)
slidify("F:\\Work\\Greenpeace\\R Skillshare\\index.Rmd")
slidify("F:\\Work\\Greenpeace\\R Skillshare\\index.Rmd")
library(data.table)
gift$DTE <- as.Date(gift$DTE)
gift$Year <- year(gift$DTE)
gift$month <- month(gift$DTE)
